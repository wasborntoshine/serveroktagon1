const TelegramBot = require('node-telegram-bot-api');
const mysql = require('mysql2/promise');


const db = mysql.createPool({
    host: "localhost",
    user: "root",
    database: "chatbottests",
    password: "chatbottests"
});

const token = '7304708558:AAFJmiQ6jwyyFrAPR-gNnJVUMp4dc1hHv0Y';
const bot = new TelegramBot(token, { polling: true });


const commands = [
    { command: "start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
    { command: "help", description: "–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏" },
    { command: "site", description: "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç" },
    { command: "creator", description: "–§–ò–û —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞" },
    { command: "randomitem", description: "–°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç" },
    { command: "deleteitem", description: "–£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID" },
    { command: "getitembyid", description: "–ü—Ä–µ–¥–º–µ—Ç –ø–æ ID" },
    { command: "webshot", description: "–í–µ–±-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" },
    { command: "qr", description: "QR-–∫–æ–¥ —Å—Å—ã–ª–∫–∏" }
];

bot.setMyCommands(commands);

bot.on('text', async (msg) => {
    const chatId = msg.chat.id;

    try {
        if (msg.text.startsWith('/start')) {
            await bot.sendMessage(chatId, `–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞!`);

            if (msg.text.length > 6) {
                const refID = msg.text.slice(7);
                await bot.sendMessage(chatId, `–í—ã –∑–∞—à–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${refID}`);
            }

        } else if (msg.text === '/help') {
            await bot.sendMessage(chatId, `–†–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏`);

        } else if (msg.text === '/site') {
            await bot.sendMessage(chatId, '[–°–∞–π—Ç –û–∫—Ç–∞–≥–æ–Ω](https://students.forus.ru/?ysclid=lzi7fy42w980728758)', {
                parse_mode: "MarkdownV2"
            });

        } else if (msg.text === '/creator') {
            await bot.sendMessage(chatId, `–¢–∫–∞—á—É–∫ –Æ—Ä–∏–π`);

        } else if (msg.text === '/randomitem') {
            const [rows] = await db.query('SELECT * FROM items ORDER BY RAND() LIMIT 1');
            if (rows.length > 0) {
                const item = rows[0];
                await bot.sendMessage(chatId, `(${item.id}) - ${item.name}: ${item.desc}`);
            } else {
                await bot.sendMessage(chatId, '–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
            }

        } else if (msg.text.startsWith('/deleteitem')) {
            const id = parseInt(msg.text.split(' ')[1]);
            if (isNaN(id)) {
                await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID.');
            } else {
                const [result] = await db.query('DELETE FROM items WHERE id = ?', [id]);
                if (result.affectedRows > 0) {
                    await bot.sendMessage(chatId, `–£–¥–∞—á–Ω–æ: –ø—Ä–µ–¥–º–µ—Ç —Å ID ${id} —É–¥–∞–ª–µ–Ω.`);
                } else {
                    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                }
            }

        } else if (msg.text.startsWith('/getitembyid')) {
            const id = parseInt(msg.text.split(' ')[1]);
            if (isNaN(id)) {
                await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID.');
            } else {
                const [rows] = await db.query('SELECT * FROM items WHERE id = ?', [id]);
                if (rows.length > 0) {
                    const item = rows[0];
                    await bot.sendMessage(chatId, `(${item.id}) - ${item.name}: ${item.desc}`);
                } else {
                    await bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                }
            }

        } else if (msg.text.startsWith('/webshot')) {
            const url = msg.text.substring(8).trim();
            const image = "https://api.letsvalidate.com/v1/thumbs/?url=" + url + "&width=1280&height=720";
            await bot.sendMessage(chatId, `[üì∑](${image}) –í–µ–±-–∑–∞—Ö–≤–∞—Ç: ${url}`, { parse_mode: "Markdown" });

        } else if (msg.text.startsWith('/qr')) {
            const data = msg.text.substring(3).trim();
            const imageqr = "https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=" + data;
            await bot.sendMessage(chatId, `[‚úèÔ∏è](${imageqr}) QR-–∫–æ–¥: ${data}`, { parse_mode: "Markdown" });

        } else {
            await bot.sendMessage(chatId, '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.');
        }

    } catch (error) {
        console.error(error);
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.');
    }
});
